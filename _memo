Vue.js + Express + Cloud Firestoreの環境統合について

参考記事
https://qiita.com/y4u0t2a1r0/items/a6aea444efc8e8e65293
参考動画
https://www.youtube.com/watch?v=j55fHUJqtyw

7/19取り合えずできた！

vue-express-sample-1 (ルートディレクトリ) 
=> client (フロントエンド側)
=> server (バックエンド側)

重要
webサーバーを立ち上げる際は、各ディレクトリごとにエディターを立ち上げるか、片方をターミナルで実行する。
同じターミナルで片方立ち上げて、ctrl+Cで閉じてもう片方実行しても意味ない



フロントエンド
$vue init webpack frontend 
がvscodeで実行できず、vscodeではvueコマンドは使えないのかも
$vue create client を代わりに拮抗する（動画より
$cd client 
$npm run serve     ここが記事では$npm run dev になっているが間違いだと思われる。vue-cliにはnpm run devはないため

バックエンド
$npm init 
$npm install express cors body-parser
$npm install --save-dev nodemon

package.json の編集
"scripts": {
  "start": "node server/index.js",  
  ここが"start": "./node_modules/nodemon/bin/nodemon.js index.js" でもできる

  "dev": "nodemon server/index.js"
  nodemonは開発用サーバーのホットリロードをさせるためのパッケージ
},

$npm run dev ここで3000が立ち上がるので,
$npm startはできないと思われる

追記
$npm run dev 
$npm start でちらでも3000が立ち上がるぽい

{
注意としては、ファイルを一度閉じないと、正常に動作しないことがある。
なので、一度ブラウザのタブやエディターを閉じてから再度実行してみる
}

フロントエンド側からサーバー側へのHTTPリクエストを送りレスポンスを受け取る
$cd client
$npm install --save-dev axios

フォルダを追加する
$mkdir routes cd routes
$mkdir api 
$touch axios.config.js

axios.config.js をかく
{
  import axios from 'axios';

  export default ()=>{
    return axios.create({
      baseURL:'http://localhost:3000/'
    })
  }
}


import axios from './axios.config.js';

export default {
  testPosting(){
    const data = {
      text:'Success!'
    }
    return axios.post('/test',data);
  }
}

//retrun がないとインポートした側に返り値がいかない。
//axios.config.jsで返り値を定数に代入しているときは、axios.post()になるけど、
//axios.config.js でexport default ()=>{}のように書くと関数が実行されない状態でエクスポートするので、インポートした側で実行する
//return axios().post()



データベース側
mongo db を使う
npm でインストールする
$npm install mongodb
$mongo ＜＝＝＝これでmongoが立ち上がる  
setting.jsが必要みたいだけど内容がよくわからん 
ドットインストールでは設定の一部を別ファイルとして書いてるだけかも
次にmongo.jsを作って、ここにドキュメントの生成とかもする

ドットインストールのやり方は古いのかも

{
  settings.js
  export.port = 1337;
  exports.host = '192,,,省略'
  exports.db = nodedb 任意でつけるデータベースの名前かも！！
  mongo.js
  var MongoClient = require('mongodb').MongoClient,
  var settings = require('./settings')
  MongoClient.connect('mongodb://' + settings.host + '/' +settings.db,function(err,db){
    //省略
  }))
  }

記事のやり方とは若干違うが、やってることは同じ
7/19 npm mongodb eslint インストール
7/20 mongodb本体もインストール済み

動画では、
async function loadPostsCollection(){
  const client = await mongodb.MongoClient.connect(
    'mongodb://...................,
    {
      useNewUrlParser:true
  })
  return client.db('データベース名').collection('posts')
}
ドキュメント（レコードもしくはrow）を追加する時は、この関数を呼び出して追加する
サーバとのやり取りに使う関数なのですべて非同期で実行

ターミナル上での操作
何をするにしても一番最初に「mongo」として「>」が下に表示されるので、その状態になっているときにmongoにあるコマンドが使えるようになる

mongoDBの設定？がまだ終わっていない気がする

$show dbs データベース一覧表示
$use [db名]
$db.createCollection('コレクション名')
$db.stats() dbの設定とかが見れる
$show collections
$db.[コレクション名].renameCollection('新しいコレクション名') コレクション名変更
$db.[コレクション名].drop() コレクション削除
$db.[コレクション名].count()ドキュメントの件数
$db.[コレクション名].find()ドキュメント一覧
$db.[コレクション名].remove({})ドキュメント全件削除
db.dropDatabase();
db.[コレクション名].remove({name:'taguchi'}) 条件付きでドキュメントを削除
